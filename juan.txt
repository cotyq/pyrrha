import abc



class Method(metaclass=abc.ABCMeta:

    @abc.abstractclassmethod()
    def get_template(cls):
        raise NotImplementedError()

    @abc.abstractclassmethod()
    def get_random_values(cls):
        raise NotImplementedError()

    @abc.abstractmethod()
    def run(self):
        raise NotImplementedError()

    @abc.abstractmethod()
    def generate_report(self):
        raise NotImplementedError()



class FiniteElement2D(Method):

    @classmethod
    def get_random_values(cls, seed=None):
        return {"k": ..., "v": ..., "c": ...}

     def run(self):
        kkk = self.get_system()
        self.zaraza(kkkk)



class FiniteElement25D(Method):

    ...



def runner(clss, seed=None):
    reports = OrderedDict()  # collections

    for cls in clss:
        values = cls.get_random_values()
        method = cls(**values)
        method.run()
        reports[cls] = method.generate_report()
        # magia negra
    return reports()




#===============================================================================
# TESTING
#===============================================================================

from pymetheus as pymth

test = pymth.FiniteElement2D(


$ pymetheo generate-template FiniteElement2D --out alumno_tortura.py


#===============================================================================
# ALUMNO
#===============================================================================

# jinja2 <<<< esto

from pymetheus import FiniteElement2D

class FiniteElement2D(Method):

    def __init__(self, k, v c):
        """K es zaraza y tieque wawawa"""

    def gen_system(self, l. v , j):
        """K es zaraza y tieque wawawa"""